// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	item "campyuk-api/features/item"

	mock "github.com/stretchr/testify/mock"
)

// ItemService is an autogenerated mock type for the ItemService type
type ItemService struct {
	mock.Mock
}

// Add provides a mock function with given fields: token, campID, newItem
func (_m *ItemService) Add(token interface{}, campID uint, newItem item.Core) (item.Core, error) {
	ret := _m.Called(token, campID, newItem)

	var r0 item.Core
	if rf, ok := ret.Get(0).(func(interface{}, uint, item.Core) item.Core); ok {
		r0 = rf(token, campID, newItem)
	} else {
		r0 = ret.Get(0).(item.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}, uint, item.Core) error); ok {
		r1 = rf(token, campID, newItem)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: token, itemID
func (_m *ItemService) Delete(token interface{}, itemID uint) error {
	ret := _m.Called(token, itemID)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, uint) error); ok {
		r0 = rf(token, itemID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: token, itemID, updateData
func (_m *ItemService) Update(token interface{}, itemID uint, updateData item.Core) (item.Core, error) {
	ret := _m.Called(token, itemID, updateData)

	var r0 item.Core
	if rf, ok := ret.Get(0).(func(interface{}, uint, item.Core) item.Core); ok {
		r0 = rf(token, itemID, updateData)
	} else {
		r0 = ret.Get(0).(item.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}, uint, item.Core) error); ok {
		r1 = rf(token, itemID, updateData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewItemService interface {
	mock.TestingT
	Cleanup(func())
}

// NewItemService creates a new instance of ItemService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewItemService(t mockConstructorTestingTNewItemService) *ItemService {
	mock := &ItemService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
