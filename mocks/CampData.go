// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	camp "campyuk-api/features/camp"

	mock "github.com/stretchr/testify/mock"
)

// CampData is an autogenerated mock type for the CampData type
type CampData struct {
	mock.Mock
}

// Add provides a mock function with given fields: userID, newCamp
func (_m *CampData) Add(userID uint, newCamp camp.Core) error {
	ret := _m.Called(userID, newCamp)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, camp.Core) error); ok {
		r0 = rf(userID, newCamp)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: userID, campID
func (_m *CampData) Delete(userID uint, campID uint) error {
	ret := _m.Called(userID, campID)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, uint) error); ok {
		r0 = rf(userID, campID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByID provides a mock function with given fields: userID, campID
func (_m *CampData) GetByID(userID uint, campID uint) (camp.Core, error) {
	ret := _m.Called(userID, campID)

	var r0 camp.Core
	if rf, ok := ret.Get(0).(func(uint, uint) camp.Core); ok {
		r0 = rf(userID, campID)
	} else {
		r0 = ret.Get(0).(camp.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, uint) error); ok {
		r1 = rf(userID, campID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: userID, role, limit, offset
func (_m *CampData) List(userID uint, role string, limit int, offset int) (int, []camp.Core, error) {
	ret := _m.Called(userID, role, limit, offset)

	var r0 int
	if rf, ok := ret.Get(0).(func(uint, string, int, int) int); ok {
		r0 = rf(userID, role, limit, offset)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 []camp.Core
	if rf, ok := ret.Get(1).(func(uint, string, int, int) []camp.Core); ok {
		r1 = rf(userID, role, limit, offset)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]camp.Core)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(uint, string, int, int) error); ok {
		r2 = rf(userID, role, limit, offset)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// RequestAdmin provides a mock function with given fields: campID, status
func (_m *CampData) RequestAdmin(campID uint, status string) error {
	ret := _m.Called(campID, status)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, string) error); ok {
		r0 = rf(campID, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: userID, campID, updateCamp
func (_m *CampData) Update(userID uint, campID uint, updateCamp camp.Core) error {
	ret := _m.Called(userID, campID, updateCamp)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, uint, camp.Core) error); ok {
		r0 = rf(userID, campID, updateCamp)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewCampData interface {
	mock.TestingT
	Cleanup(func())
}

// NewCampData creates a new instance of CampData. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCampData(t mockConstructorTestingTNewCampData) *CampData {
	mock := &CampData{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
