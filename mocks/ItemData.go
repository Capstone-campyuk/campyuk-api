// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	item "campyuk-api/features/item"

	mock "github.com/stretchr/testify/mock"
)

// ItemData is an autogenerated mock type for the ItemData type
type ItemData struct {
	mock.Mock
}

// Add provides a mock function with given fields: userID, campID, addItem
func (_m *ItemData) Add(userID uint, campID uint, addItem item.Core) (item.Core, error) {
	ret := _m.Called(userID, campID, addItem)

	var r0 item.Core
	if rf, ok := ret.Get(0).(func(uint, uint, item.Core) item.Core); ok {
		r0 = rf(userID, campID, addItem)
	} else {
		r0 = ret.Get(0).(item.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, uint, item.Core) error); ok {
		r1 = rf(userID, campID, addItem)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: itemID, campID
func (_m *ItemData) Delete(itemID uint, campID uint) error {
	ret := _m.Called(itemID, campID)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, uint) error); ok {
		r0 = rf(itemID, campID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: itemID, campID, updateData
func (_m *ItemData) Update(itemID uint, campID uint, updateData item.Core) (item.Core, error) {
	ret := _m.Called(itemID, campID, updateData)

	var r0 item.Core
	if rf, ok := ret.Get(0).(func(uint, uint, item.Core) item.Core); ok {
		r0 = rf(itemID, campID, updateData)
	} else {
		r0 = ret.Get(0).(item.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, uint, item.Core) error); ok {
		r1 = rf(itemID, campID, updateData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewItemData interface {
	mock.TestingT
	Cleanup(func())
}

// NewItemData creates a new instance of ItemData. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewItemData(t mockConstructorTestingTNewItemData) *ItemData {
	mock := &ItemData{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
