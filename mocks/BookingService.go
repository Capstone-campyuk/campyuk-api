// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	booking "campyuk-api/features/booking"

	mock "github.com/stretchr/testify/mock"
)

// BookingService is an autogenerated mock type for the BookingService type
type BookingService struct {
	mock.Mock
}

// Cancel provides a mock function with given fields: token, bookingID
func (_m *BookingService) Cancel(token interface{}, bookingID uint) (booking.Core, error) {
	ret := _m.Called(token, bookingID)

	var r0 booking.Core
	if rf, ok := ret.Get(0).(func(interface{}, uint) booking.Core); ok {
		r0 = rf(token, bookingID)
	} else {
		r0 = ret.Get(0).(booking.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}, uint) error); ok {
		r1 = rf(token, bookingID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: token
func (_m *BookingService) Create(token interface{}) (booking.Core, error) {
	ret := _m.Called(token)

	var r0 booking.Core
	if rf, ok := ret.Get(0).(func(interface{}) booking.Core); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Get(0).(booking.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: token, bookingID
func (_m *BookingService) GetByID(token interface{}, bookingID uint) (booking.Core, error) {
	ret := _m.Called(token, bookingID)

	var r0 booking.Core
	if rf, ok := ret.Get(0).(func(interface{}, uint) booking.Core); ok {
		r0 = rf(token, bookingID)
	} else {
		r0 = ret.Get(0).(booking.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}, uint) error); ok {
		r1 = rf(token, bookingID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: token
func (_m *BookingService) List(token interface{}) ([]booking.Core, error) {
	ret := _m.Called(token)

	var r0 []booking.Core
	if rf, ok := ret.Get(0).(func(interface{}) []booking.Core); ok {
		r0 = rf(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]booking.Core)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: token
func (_m *BookingService) Update(token interface{}) (booking.Core, error) {
	ret := _m.Called(token)

	var r0 booking.Core
	if rf, ok := ret.Get(0).(func(interface{}) booking.Core); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Get(0).(booking.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewBookingService interface {
	mock.TestingT
	Cleanup(func())
}

// NewBookingService creates a new instance of BookingService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBookingService(t mockConstructorTestingTNewBookingService) *BookingService {
	mock := &BookingService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
