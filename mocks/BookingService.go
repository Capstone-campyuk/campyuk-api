// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	booking "campyuk-api/features/booking"

	mock "github.com/stretchr/testify/mock"
)

// BookingService is an autogenerated mock type for the BookingService type
type BookingService struct {
	mock.Mock
}

// Accept provides a mock function with given fields: token, bookingID, status
func (_m *BookingService) Accept(token interface{}, bookingID uint, status string) error {
	ret := _m.Called(token, bookingID, status)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, uint, string) error); ok {
		r0 = rf(token, bookingID, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Callback provides a mock function with given fields: ticket, status
func (_m *BookingService) Callback(ticket string, status string) error {
	ret := _m.Called(ticket, status)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(ticket, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Cancel provides a mock function with given fields: token, bookingID, status
func (_m *BookingService) Cancel(token interface{}, bookingID uint, status string) error {
	ret := _m.Called(token, bookingID, status)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, uint, string) error); ok {
		r0 = rf(token, bookingID, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Create provides a mock function with given fields: token, newBooking
func (_m *BookingService) Create(token interface{}, newBooking booking.Core) (booking.Core, error) {
	ret := _m.Called(token, newBooking)

	var r0 booking.Core
	if rf, ok := ret.Get(0).(func(interface{}, booking.Core) booking.Core); ok {
		r0 = rf(token, newBooking)
	} else {
		r0 = ret.Get(0).(booking.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}, booking.Core) error); ok {
		r1 = rf(token, newBooking)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateEvent provides a mock function with given fields: code, bookingID
func (_m *BookingService) CreateEvent(code string, bookingID uint) error {
	ret := _m.Called(code, bookingID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, uint) error); ok {
		r0 = rf(code, bookingID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByID provides a mock function with given fields: token, bookingID
func (_m *BookingService) GetByID(token interface{}, bookingID uint) (booking.Core, error) {
	ret := _m.Called(token, bookingID)

	var r0 booking.Core
	if rf, ok := ret.Get(0).(func(interface{}, uint) booking.Core); ok {
		r0 = rf(token, bookingID)
	} else {
		r0 = ret.Get(0).(booking.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}, uint) error); ok {
		r1 = rf(token, bookingID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: token, page
func (_m *BookingService) List(token interface{}, page int) (map[string]interface{}, []booking.Core, error) {
	ret := _m.Called(token, page)

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func(interface{}, int) map[string]interface{}); ok {
		r0 = rf(token, page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	var r1 []booking.Core
	if rf, ok := ret.Get(1).(func(interface{}, int) []booking.Core); ok {
		r1 = rf(token, page)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]booking.Core)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(interface{}, int) error); ok {
		r2 = rf(token, page)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

type mockConstructorTestingTNewBookingService interface {
	mock.TestingT
	Cleanup(func())
}

// NewBookingService creates a new instance of BookingService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBookingService(t mockConstructorTestingTNewBookingService) *BookingService {
	mock := &BookingService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
