// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	camp "campyuk-api/features/camp"

	mock "github.com/stretchr/testify/mock"

	multipart "mime/multipart"
)

// CampService is an autogenerated mock type for the CampService type
type CampService struct {
	mock.Mock
}

// Add provides a mock function with given fields: token, newCamp, document, images
func (_m *CampService) Add(token interface{}, newCamp camp.Core, document *multipart.FileHeader, images []*multipart.FileHeader) error {
	ret := _m.Called(token, newCamp, document, images)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, camp.Core, *multipart.FileHeader, []*multipart.FileHeader) error); ok {
		r0 = rf(token, newCamp, document, images)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: token, campID
func (_m *CampService) Delete(token interface{}, campID uint) error {
	ret := _m.Called(token, campID)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, uint) error); ok {
		r0 = rf(token, campID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByID provides a mock function with given fields: token, campID
func (_m *CampService) GetByID(token interface{}, campID uint) (camp.Core, error) {
	ret := _m.Called(token, campID)

	var r0 camp.Core
	if rf, ok := ret.Get(0).(func(interface{}, uint) camp.Core); ok {
		r0 = rf(token, campID)
	} else {
		r0 = ret.Get(0).(camp.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}, uint) error); ok {
		r1 = rf(token, campID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: token
func (_m *CampService) List(token interface{}) ([]camp.Core, error) {
	ret := _m.Called(token)

	var r0 []camp.Core
	if rf, ok := ret.Get(0).(func(interface{}) []camp.Core); ok {
		r0 = rf(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]camp.Core)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RequestAdmin provides a mock function with given fields: token, campID
func (_m *CampService) RequestAdmin(token interface{}, campID uint) error {
	ret := _m.Called(token, campID)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, uint) error); ok {
		r0 = rf(token, campID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: token, campID, udpateCamp, document, images
func (_m *CampService) Update(token interface{}, campID uint, udpateCamp camp.Core, document *multipart.FileHeader, images []*multipart.FileHeader) error {
	ret := _m.Called(token, campID, udpateCamp, document, images)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, uint, camp.Core, *multipart.FileHeader, []*multipart.FileHeader) error); ok {
		r0 = rf(token, campID, udpateCamp, document, images)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewCampService interface {
	mock.TestingT
	Cleanup(func())
}

// NewCampService creates a new instance of CampService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCampService(t mockConstructorTestingTNewCampService) *CampService {
	mock := &CampService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
